## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  imagePullSecrets: []
  storageClass: ""

## Force target Kubernetes version (using Helm capabilities if not set)
kubeVersion: ""
## String to partially override keycloak.fullname
nameOverride: ""
## String to fully override keycloak.fullname
fullnameOverride: ""
## Add deployment host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
hostAliases: []
## Labels to add to all deployed objects
commonLabels: {}
## Annotations to add to all deployed objects
commonAnnotations: {}
## Default Kubernetes cluster domain
clusterDomain: cluster.local
## Array of extra objects to deploy with the release
extraDeploy: []



image:
  registry: quay.io
  repository: keycloak/keycloak-x
  tag: 15.0.1
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false # REMOVE ?


auth:
  ## Create administrator user on boot
  createAdminUser: true
  ## Keycloak administrator user
  adminUser: user
  ## Keycloak administrator password for the new user
  adminPassword: ""
  ## Wildfly management user
  managementUser: manager
  ## Wildfly management password
  managementPassword: ""
  ## An already existing secret containing auth info
  ## e.g:
  ## existingSecret:
  ##   name: mySecret
  ##   keyMapping:
  ##     admin-password: myPasswordKey
  ##     management-password: myManagementPasswordKey
  ##     database-password: myDatabasePasswordKey
  ##     tls-keystore-password: myTlsKeystorePasswordKey
  ##     tls-truestore-password: myTlsTruestorePasswordKey
  existingSecret: ""
  ## Override `existingSecret` and other secret values
  ## e.g:
  ## existingSecretPerPassword:
  ##   keyMapping:
  ##     adminPassword: KEYCLOAK_ADMIN_PASSWORD
  ##     managementPassword: KEYCLOAK_MANAGEMENT_PASSWORD
  ##     databasePassword: password
  ##     tlsKeystorePassword: JKS_KEYSTORE_TRUSTSTORE_PASSWORD
  ##     tlsTruststorePassword: JKS_KEYSTORE_TRUSTSTORE_PASSWORD
  ##   adminPassword:
  ##     name: keycloak-test2.credentials ## release-name
  ##   managementPassword:
  ##     name: keycloak-test2.credentials
  ##   databasePassword:
  ##     name: keycloak.pocwatt-keycloak-cluster.credentials
  ##   tlsKeystorePassword:
  ##     name: keycloak-test2.credentials
  ##   tlsTruststorePassword:
  ##     name: keycloak-test2.credentials
  existingSecretPerPassword: ""
  ## TLS encryption parameters
  ## ref: https://github.com/bitnami/bitnami-docker-keycloak#tls-encryption
  tls:
    ## Enable TLS encryption
    enabled: false
    ## Generate automatically self-signed TLS certificates. Currently only supports PEM certificates
    autoGenerated: false
    ## Existing secret containing the TLS certificates per Keycloak replica
    ## Create this secret following the steps below:
    ## 1) Generate your trustore and keystore files (more info at https://www.keycloak.org/docs/latest/server_installation/#_setting_up_ssl)
    ## 2) Rename your truststore to `keycloak.truststore.jks`.
    ## 3) Rename your keystores to `keycloak-X.keystore.jks` where X is the ID of each Keycloak replica
    ## 4) Run the command below where SECRET_NAME is the name of the secret you want to create:
    ##       kubectl create secret generic SECRET_NAME --from-file=./keycloak.truststore.jks --from-file=./keycloak-0.keystore.jks --from-file=./keycloak-1.keystore.jks ...
    existingSecret: ""
    ## DEPRECATED. Use `auth.tls.existingSecret` instead
    jksSecret: ""
    ## Password to access the keystore when it's password-protected
    keystorePassword: ""
    ## Password to access the truststore when it's password-protected
    truststorePassword: ""
    ## Init containers' resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## The resources limits for the TLS init container
    ## The requested resources for the TLS init container
    resources:
      ## Example:
      ## limits:
      ##    cpu: 100m
      ##    memory: 128Mi
      limits: {}
      ## Examples:
      ## requests:
      ##    cpu: 100m
      ##    memory: 128Mi
      requests: {}
## Enable Proxy Address Forwarding
## ref: https://www.keycloak.org/docs/latest/server_installation/#_setting-up-a-load-balancer-or-proxy
##
proxyAddressForwarding: false
## Keycloak Service Discovery settings
## ref: https://github.com/bitnami/bitnami-docker-keycloak#cluster-configuration
##
serviceDiscovery:
  ## Enable Service Discovery for Keycloak (required if `replicaCount` > `1`)
  enabled: false
  ## Sets the protocol that Keycloak nodes would use to discover new peers
  ## Available protocols can be found at http://www.jgroups.org/javadoc3/org/jgroups/protocols/
  protocol: kubernetes.KUBE_PING
  ## Properties for the discovery protocol set in `serviceDiscovery.protocol` parameter
  ## List of key=>value pairs
  ## Example:
  ## properties:
  ##   - datasource_jndi_name=>"java:jboss/datasources/KeycloakDS"
  ##   - initialize_sql=>"CREATE TABLE IF NOT EXISTS JGROUPSPING ( own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, created timestamp default current_timestamp, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))"
  properties: []
  ## Transport stack for the discovery protocol set in `serviceDiscovery.protocol` parameter
  transportStack: tcp
## Keycloak cache settings
## ref: https://github.com/bitnami/bitnami-docker-keycloak#cluster-configuration
##
cache:
  ## Number of nodes that will replicate cached data
  ownersCount: 1
  ## Number of nodes that will replicate cached authentication data
  authOwnersCount: 1
## Keycloak Configuration. Auto-generated based on other parameters when not specified
## Specify content for standalone-ha.xml
## NOTE: This will override configuring Keycloak based on environment variables (including those set by the chart)
## The standalone-ha.xml is auto-generated based on other parameters when this parameter is not specified
##
## Example:
## configuration: |-
##    foo: bar
##    baz:
##
configuration: ""
## Name of existing ConfigMap with Keycloak configuration
## NOTE: When it's set the configuration parameter is ignored
##
existingConfigmap: ""
## Extra default startup args
##
extraStartupArgs: ""
## Dictionary of initdb scripts
## Specify dictionary of scripts to be run at first boot
## ref: https://github.com/bitnami/bitnami-docker-keycloak#initializing-a-new-instance
## Example:
## initdbScripts:
##   my_init_script.sh: |
##      #!/bin/bash
##      echo "Do something."
##
initdbScripts: {}
## ConfigMap with the initdb scripts (Note: Overrides `initdbScripts`)
##
initdbScriptsConfigMap: ""
## Override default container command (useful when using custom images)
##
command: []
## Override default container args (useful when using custom images)
##
args: []
## Extra environment variables to be set on Keycloak container
## Example:
## extraEnvVars:
##   - name: FOO
##     value: "bar"
##
extraEnvVars: []
## Name of existing ConfigMap containing extra env vars
##
extraEnvVarsCM: ""
## Name of existing Secret containing extra env vars
##
extraEnvVarsSecret: ""

## @section keycloak-config-cli parameters

## Configuration for keycloak-config-cli
## ref: https://github.com/adorsys/keycloak-config-cli
##
keycloakConfigCli:
  ## Whether to enable keycloak-config-cli
  enabled: false
  ## Bitnami keycloak-config-cli image
  ## ref: https://hub.docker.com/r/bitnami/keycloak-config-cli/tags/
  ## keycloak-config-cli container image registry
  ## keycloak-config-cli container image repository
  ## keycloak-config-cli container image tag
  ## keycloak-config-cli container image pull policy
  ## keycloak-config-cli container image pull secrets
  image:
    registry: docker.io
    repository: bitnami/keycloak-config-cli
    tag: 4.0.1-debian-10-r25
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    pullSecrets: []
  ## [objects] Annotations for keycloak-config-cli job
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  annotations:
    helm.sh/hook: "post-install,post-upgrade,post-rollback"
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "5"
  ## Command for running the container (set to default if not set). Use array form
  command: []
  ## Args for running the container (set to default if not set). Use array form
  args: []
  ## Job pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  hostAliases: []
  ## Keycloak config CLI resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  ## The resources limits for the keycloak-config-cli container
  ## The requested resources for the keycloak-config-cli container
  resources:
    ## Example:
    ## limits:
    ##    cpu: 200m
    ##    memory: 256Mi
    limits: {}
    ## Examples:
    ## requests:
    ##    cpu: 200m
    ##    memory: 10Mi
    requests: {}
  ## keycloak-config-cli containers' Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## Enabled keycloak-config-cli containers' Security Context
  ## Set keycloak-config-cli container's Security Context runAsUser
  ## Set keycloak-config-cli container's Security Context runAsNonRoot
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
  ## keycloak-config-cli pods' Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## Enabled keycloak-config-cli pods' Security Context
  ## Set keycloak-config-cli pod's Security Context fsGroup
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  ## Number of retries before considering a Job as failed
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy
  backoffLimit: 1
  ## Pod extra labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}
  ## Annotations for job pod
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  ## Additional environment variables to set
  ## Example:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  extraEnvVars: []
  ## ConfigMap with extra environment variables
  extraEnvVarsCM: ""
  ## Secret with extra environment variables
  extraEnvVarsSecret: ""
  ## Extra volumes to add to the job
  extraVolumes: []
  ## Extra volume mounts to add to the container
  extraVolumeMounts: []
  ## keycloak-config-cli realms configuration
  ## NOTE: nil keys will be considered files to import locally
  ## Example:
  ## configuration:
  ##   realm1.json: |
  ##     {
  ##       "realm": "realm1",
  ##       "clients": []
  ##     }
  ##   files/realm2.yaml:
  ##   realm3.yaml: |
  ##     realm: realm3
  ##     clients: []
  configuration: {}
  ## ConfigMap with keycloak-config-cli configuration. This will override `keycloakConfigCli.config`
  ## NOTE: This will override keycloakConfigCli.configuration
  existingConfigmap: ""

## @section Keycloak deployment/statefulset parameters

## Number of Keycloak replicas to deploy
##
replicaCount: 1
## [object] Keycloak container ports to open
##
containerPorts:
  http: 8080
  https: 8443
## Keycloak containers' SecurityContext
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## Enabled Keykloak pods' Security Context
## Set Keykloak pod's Security Context fsGroup
##
podSecurityContext:
  enabled: true
  fsGroup: 1001
## Keycloak pods' Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## Enabled Keykloak containers' Security Context
## Set Keykloak container's Security Context runAsUser
## Set Keykloak container's Security Context runAsNonRoot
##
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
## Keycloak resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
## The resources limits for the Keycloak container
## The requested resources for the Keycloak container
##
resources:
  ## Example:
  ## limits:
  ##    cpu: 200m
  ##    memory: 256Mi
  limits: {}
  ## Examples:
  ## requests:
  ##    cpu: 200m
  ##    memory: 10Mi
  requests: {}
## Configure extra options for liveness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## Enable livenessProbe
## Request path for livenessProbe
## Port for livenessProbe
## Initial delay seconds for livenessProbe
## Period seconds for livenessProbe
## Timeout seconds for livenessProbe
## Failure threshold for livenessProbe
## Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  httpGet:
    path: /auth/
    port: http
  initialDelaySeconds: 300
  periodSeconds: 1
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
## Configure extra options for readiness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## Enable readinessProbe
## Request path for readinessProbe
## Port for readinessProbe
## Initial delay seconds for readinessProbe
## Period seconds for readinessProbe
## Timeout seconds for readinessProbe
## Failure threshold for readinessProbe
## Success threshold for readinessProbe
##
readinessProbe:
  enabled: true
  httpGet:
    path: /auth/realms/master
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
## Custom Liveness probes for Keycloak
##
customLivenessProbe: {}
## Custom Rediness probes Keycloak
##
customReadinessProbe: {}
## Strategy to use to update Pods
##
updateStrategy:
  ## StrategyType
  ## Can be set to RollingUpdate or OnDelete
  type: RollingUpdate
## Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAffinityPreset: ""
## Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAntiAffinityPreset: soft
## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
##
nodeAffinityPreset:
  ## Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  type: ""
  ## Node label key to match. Ignored if `affinity` is set.
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  key: ""
  ## Node label values to match. Ignored if `affinity` is set.
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  values: []
## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}
## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## Extra labels for Keycloak pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}
## Annotations for Keycloak pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## Keycloak pods' priority.
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""
## LifecycleHooks to set additional configuration at startup
##
lifecycleHooks: {}
## Optionally specify extra list of additional volumes for Keycloak pods
##
extraVolumes: []
## Optionally specify extra list of additional volumeMounts for Keycloak container(s)
##
extraVolumeMounts: []
## Add additional init containers to the Keycloak pods
## Example:
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
initContainers: []
## Add additional sidecar containers to the Keycloak pods
## Example:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: []

## @section Exposure parameters

## Service configuration
##
service:
  ## Kubernetes service type
  type: LoadBalancer
  ## Service HTTP port
  port: 80
  ## HTTPS Port
  httpsPort: 443
  ## [object] Specify the nodePort values for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  nodePorts:
    http: ""
    https: ""
  ## Keycloak service clusterIP IP
  ## e.g:
  ## clusterIP: None
  clusterIP: ""
  ## loadBalancerIP for the SuiteCRM Service (optional, cloud specific)
  ## ref: http://kubernetes.io/docs/user-guide/services/#type-loadbalancer
  loadBalancerIP: ""
  ## Address that are allowed when service is LoadBalancer
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## Example:
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  loadBalancerSourceRanges: []
  ## Enable client source IP preservation
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  externalTrafficPolicy: Cluster
  ## Annotations for Keycloak service
  annotations: {}
## Ingress configuration
##
ingress:
  ## Enable ingress controller resource
  enabled: false
  ## Add annotations for cert-manager
  certManager: false
  ## Default host for the ingress resource
  hostname: keycloak.local
  ## Force Ingress API version (automatically detected if not set)
  apiVersion: ""
  ## IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ingressClassName: ""
  ## Ingress path
  path: /
  ## Ingress path type
  pathType: ImplementationSpecific
  ## Ingress annotations
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  annotations: {}
  ## Enable TLS configuration for the hostname defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret, relay on cert-manager to create it, or
  ## let the chart create self-signed certificates for you
  tls: false
  ## The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## Example:
  ## extraHosts:
  ##   - name: keycloak.local
  ##     path: /
  extraHosts: []
  ## The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## Example:
  ## extraTls:
  ## - hosts:
  ##     - keycloak.local
  ##   secretName: keycloak.local-tls
  extraTls: []
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
  ## name should line up with a secretName set further up
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create the secret for you
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## Example
  ## secrets:
  ##   - name: aspnet-core.local-tls
  ##     key: ""
  ##     certificate: ""
  secrets: []
  ## It is you own the certificate as secret.
  existingSecret: ""
  ## Service port to be used
  ## Default is http. Alternative is https.
  servicePort: http
## Network Policy configuration
## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
##
networkPolicy:
  ## Enable the default NetworkPolicy policy
  enabled: false
  ## Don't require client label for connections
  ## The Policy model to apply. When set to false, only pods with the correct
  ## client label will have network access to the ports Keycloak is listening
  ## on. When true, Keycloak will accept connections from any source
  ## (with the correct destination port).
  allowExternal: true
  ## Additional NetworkPolicy rules
  ## Note that all rules are OR-ed.
  ## Example:
  ## additionalRules:
  ##   - matchLabels:
  ##       - role: frontend
  ##   - matchExpressions:
  ##       - key: role
  ##         operator: In
  ##         values:
  ##           - frontend
  additionalRules: {}

## @section RBAC parameters

## Specifies whether a ServiceAccount should be created
##
serviceAccount:
  ## Enable the creation of a ServiceAccount for Keycloak pods
  create: true
  ## Name of the created ServiceAccount
  ## If not set and create is true, a name is generated using the fullname template
  name: ""
## Specifies whether RBAC resources should be created
##
rbac:
  ## Whether to create and use RBAC resources or not
  create: false
  ## Custom RBAC rules
  ## Example:
  ## rules:
  ##   - apiGroups:
  ##       - ""
  ##     resources:
  ##       - pods
  ##     verbs:
  ##       - get
  ##       - list
  rules: []

## @section Other parameters

## Keycloak Pod Disruption Budget configuration
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
##
pdb:
  ## Enable/disable a Pod Disruption Budget creation
  create: false
  ## Minimum number/percentage of pods that should remain scheduled
  minAvailable: 1
  ## Maximum number/percentage of pods that may be made unavailable
  maxUnavailable: ""
## Keycloak Autoscaling configuration
## Enable autoscaling for Keycloak
## Minimum number of Keycloak replicas
## Maximum number of Keycloak replicas
## Target CPU utilization percentage
## Target Memory utilization percentage
##
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU: ""
  targetMemory: ""

## @section Metrics parameters

## Metrics configuration
##
metrics:
  ## Enable exposing Keycloak statistics
  ## ref: https://github.com/bitnami/bitnami-docker-keycloak#enabling-statistics
  enabled: false
  ## Keycloak metrics service parameters
  service:
    ## Service HTTP management port
    port: 9990
    ## [object] Annotations for enabling prometheus to access the metrics endpoints
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.port }}"
  ## Prometheus Operator ServiceMonitor configuration
  serviceMonitor:
    ## Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
    enabled: false
    ## Namespace which Prometheus is running in
    namespace: ""
    ## Interval at which metrics should be scraped
    interval: 30s
    ## Specify the timeout after which the scrape is ended
    ## e.g:
    ##   scrapeTimeout: 30s
    scrapeTimeout: ""
    ## Specify Metric Relabellings to add to the scrape endpoint
    relabellings: []
    ## honorLabels chooses the metric's labels on collisions with target labels
    honorLabels: false
    ## Used to pass Labels that are required by the installed Prometheus Operator
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
    additionalLabels: {}

## @section Database parameters

## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
##
postgresql:
  ## Deploy a PostgreSQL server to satisfy the applications database requirements
  enabled: true
  ## Keycloak PostgreSQL user (has superuser privileges if username is `postgres`)
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  postgresqlUsername: bn_keycloak
  ## Keycloak PostgreSQL password - ignored if existingSecret is provided
  ## Defaults to a random 10-character alphanumeric string if not set
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  postgresqlPassword: some-password
  ## Name of the database to create
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run
  postgresqlDatabase: bitnami_keycloak
  ## Use an existing secret file with the PostgreSQL password
  existingSecret: ""
  ## PostgreSQL data Persistent Volume Storage Class
  ## Enable database persistence using PVC
  persistence:
    enabled: true
## External database configuration
##
externalDatabase:
  ## Host of the external database
  host: ""
  ## Database port
  port: 5432
  ## non admin username for Keycloak Database
  user: bn_keycloak
  ## Database password
  password: ""
  ## Database name
  database: bitnami_keycloak
  ## Use an existing secret file with the external PostgreSQL credentials
  existingSecret: ""
